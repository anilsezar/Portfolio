@page "/Contact"
@using System.ComponentModel.DataAnnotations
@using Portfolio.Grpc
@inject SendEmailToAdmin.SendEmailToAdminClient SendEmailToAdminClient;

<section id="contact" class="contact">
    <div class="container">

        <div class="section-title">
            <h2>Contact</h2>
            <p>Feel free to reach out with any questions you might have!</p>
        </div>

        <div class="row" data-aos="fade-in">
            <div class="col-lg-5 d-flex align-items-stretch">
                <div class="info">
                    <div class="address">
                        <i class="bi bi-geo-alt"></i>
                        <h4>Location:</h4>
                        <p>Istanbul, Turkey</p>
                    </div>

                    <div class="email">
                        <i class="bi bi-envelope"></i>
                        <h4>Email:</h4>
                        <p>msnanil@hotmail.com</p>
                    </div>

                    <div class="phone">
                        <i class="bi bi-phone"></i>
                        <h4>Gsm & Whatsapp:</h4>
                        <p>+90 531 627 53 29</p>
                    </div>
                    <iframe alt="Map of Istanbul, covers all of this mega city. It's radius might be more than 200 km" src="https://www.google.com/maps/embed/v1/view?key=AIzaSyCZvkrT_CC5SEH3xOhsZm7QB1aPsX5QCRI&center=41.012922,28.991611&zoom=8&language=en" frameborder="0" loading="lazy" style="border:0; width: 100%; height: 290px;" allowfullscreen></iframe>
                </div>
            </div>

            <div class="col-lg-7 mt-5 mt-lg-0 d-flex align-items-stretch">
                <EditForm Model="@formData" OnValidSubmit="@HandleValidSubmit" class="email-form">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label for="name">Your Name</label>
                            <InputText id="name" class="form-control" @bind-Value="formData.Name" placeholder="Anil" minlength="3"/>
                            <ValidationMessage For="@(() => formData.Name)" />
                        </div>
                        <div class="form-group col-md-6">
                            <label for="email">Your Email</label>
                            <InputText id="email" type="email" class="form-control" @bind-Value="formData.Email" placeholder="email@address.com"/>
                            <ValidationMessage For="@(() => formData.Email)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="subject">Subject</label>
                        <InputText id="subject" class="form-control" @bind-Value="formData.Subject" placeholder="subject" minlength="2"/>
                        <ValidationMessage For="@(() => formData.Subject)" />
                    </div>
                    <div class="form-group">
                        <label for="message">Message</label>
                        <InputTextArea id="message" class="form-control" @bind-Value="formData.Message" placeholder="your message here" minlength="5"/>
                        <ValidationMessage For="@(() => formData.Message)" />
                    </div>
                    <div class="text-center">
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span>Sending...</span>
                            }
                            else
                            {
                                <span>Send Message</span>
                            }
                        </button>
                    </div>
                </EditForm>

                @if (isSuccess.HasValue)
                {
                    <div class="floating-alert @(isSuccess.Value ? "alert-success" : "alert-danger")" id="floating-alert">
                        @resultMessage
                    </div>
                    <script>
                        setTimeout(() => {
                            const alert = document.getElementById('floating-alert');
                            if (alert) {
                                alert.style.opacity = '0'; // Fade out
                                setTimeout(() => alert.remove(), 500); // Remove from DOM after fade
                            }
                        }, 3000); // 3-second delay before fading out
                    </script>
                }
            </div>
        </div>
    </div>
</section>

@code {
    private const int NameMinLength = 3;
    private const int SubjectMinLength = 2;
    private const int MessageMinLength = 15;

    private FormModel formData = new FormModel();
    private bool isSubmitting = false;
    private bool? isSuccess = null;
    private string resultMessage = "";

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        isSuccess = null;
        resultMessage = "";

        try
        {
            // Simulate an async operation
            await Task.Delay(2000);

            // Simulate success
            isSuccess = true;
            resultMessage = "Your message has been sent successfully!";
        }
        catch
        {
            isSuccess = false;
            resultMessage = "There was an error sending your message. Please try again later.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private class FormModel
    {
        [Required(ErrorMessage = "Name is required.")]
        [MinLength(NameMinLength, ErrorMessage = "{0} must be at least {1} characters.")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Subject is required.")]
        [MinLength(SubjectMinLength, ErrorMessage = "{0} must be at least {1} characters.")]
        public string Subject { get; set; }

        [Required(ErrorMessage = "Message is required.")]
        [MinLength(MessageMinLength, ErrorMessage = "{0} must be at least {1} characters.")]
        public string Message { get; set; }
    }
}

