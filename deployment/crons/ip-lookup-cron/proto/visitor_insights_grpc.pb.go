// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: visitor_insights.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VisitorInsights_GetIpsToCheck_FullMethodName     = "/client_info.VisitorInsights/GetIpsToCheck"
	VisitorInsights_PersistCheckedIps_FullMethodName = "/client_info.VisitorInsights/PersistCheckedIps"
	VisitorInsights_StoreVisitorInfo_FullMethodName  = "/client_info.VisitorInsights/StoreVisitorInfo"
)

// VisitorInsightsClient is the client API for VisitorInsights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VisitorInsightsClient interface {
	GetIpsToCheck(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetIpsToCheckResponse, error)
	PersistCheckedIps(ctx context.Context, in *PersistCheckedIpsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StoreVisitorInfo(ctx context.Context, in *StoreVisitorInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type visitorInsightsClient struct {
	cc grpc.ClientConnInterface
}

func NewVisitorInsightsClient(cc grpc.ClientConnInterface) VisitorInsightsClient {
	return &visitorInsightsClient{cc}
}

func (c *visitorInsightsClient) GetIpsToCheck(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetIpsToCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIpsToCheckResponse)
	err := c.cc.Invoke(ctx, VisitorInsights_GetIpsToCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorInsightsClient) PersistCheckedIps(ctx context.Context, in *PersistCheckedIpsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, VisitorInsights_PersistCheckedIps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorInsightsClient) StoreVisitorInfo(ctx context.Context, in *StoreVisitorInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, VisitorInsights_StoreVisitorInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisitorInsightsServer is the server API for VisitorInsights service.
// All implementations must embed UnimplementedVisitorInsightsServer
// for forward compatibility.
type VisitorInsightsServer interface {
	GetIpsToCheck(context.Context, *empty.Empty) (*GetIpsToCheckResponse, error)
	PersistCheckedIps(context.Context, *PersistCheckedIpsRequest) (*empty.Empty, error)
	StoreVisitorInfo(context.Context, *StoreVisitorInfoRequest) (*empty.Empty, error)
	mustEmbedUnimplementedVisitorInsightsServer()
}

// UnimplementedVisitorInsightsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVisitorInsightsServer struct{}

func (UnimplementedVisitorInsightsServer) GetIpsToCheck(context.Context, *empty.Empty) (*GetIpsToCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpsToCheck not implemented")
}
func (UnimplementedVisitorInsightsServer) PersistCheckedIps(context.Context, *PersistCheckedIpsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersistCheckedIps not implemented")
}
func (UnimplementedVisitorInsightsServer) StoreVisitorInfo(context.Context, *StoreVisitorInfoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreVisitorInfo not implemented")
}
func (UnimplementedVisitorInsightsServer) mustEmbedUnimplementedVisitorInsightsServer() {}
func (UnimplementedVisitorInsightsServer) testEmbeddedByValue()                         {}

// UnsafeVisitorInsightsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VisitorInsightsServer will
// result in compilation errors.
type UnsafeVisitorInsightsServer interface {
	mustEmbedUnimplementedVisitorInsightsServer()
}

func RegisterVisitorInsightsServer(s grpc.ServiceRegistrar, srv VisitorInsightsServer) {
	// If the following call pancis, it indicates UnimplementedVisitorInsightsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VisitorInsights_ServiceDesc, srv)
}

func _VisitorInsights_GetIpsToCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorInsightsServer).GetIpsToCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisitorInsights_GetIpsToCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorInsightsServer).GetIpsToCheck(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorInsights_PersistCheckedIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistCheckedIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorInsightsServer).PersistCheckedIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisitorInsights_PersistCheckedIps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorInsightsServer).PersistCheckedIps(ctx, req.(*PersistCheckedIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorInsights_StoreVisitorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreVisitorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorInsightsServer).StoreVisitorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisitorInsights_StoreVisitorInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorInsightsServer).StoreVisitorInfo(ctx, req.(*StoreVisitorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VisitorInsights_ServiceDesc is the grpc.ServiceDesc for VisitorInsights service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VisitorInsights_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client_info.VisitorInsights",
	HandlerType: (*VisitorInsightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIpsToCheck",
			Handler:    _VisitorInsights_GetIpsToCheck_Handler,
		},
		{
			MethodName: "PersistCheckedIps",
			Handler:    _VisitorInsights_PersistCheckedIps_Handler,
		},
		{
			MethodName: "StoreVisitorInfo",
			Handler:    _VisitorInsights_StoreVisitorInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "visitor_insights.proto",
}
