// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: background_images.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackgroundImages_Persist_FullMethodName = "/background_images.BackgroundImages/Persist"
	BackgroundImages_Get_FullMethodName     = "/background_images.BackgroundImages/Get"
)

// BackgroundImagesClient is the client API for BackgroundImages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackgroundImagesClient interface {
	Persist(ctx context.Context, in *Url, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Url, error)
}

type backgroundImagesClient struct {
	cc grpc.ClientConnInterface
}

func NewBackgroundImagesClient(cc grpc.ClientConnInterface) BackgroundImagesClient {
	return &backgroundImagesClient{cc}
}

func (c *backgroundImagesClient) Persist(ctx context.Context, in *Url, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, BackgroundImages_Persist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundImagesClient) Get(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Url, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Url)
	err := c.cc.Invoke(ctx, BackgroundImages_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackgroundImagesServer is the server API for BackgroundImages service.
// All implementations must embed UnimplementedBackgroundImagesServer
// for forward compatibility.
type BackgroundImagesServer interface {
	Persist(context.Context, *Url) (*empty.Empty, error)
	Get(context.Context, *empty.Empty) (*Url, error)
	mustEmbedUnimplementedBackgroundImagesServer()
}

// UnimplementedBackgroundImagesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackgroundImagesServer struct{}

func (UnimplementedBackgroundImagesServer) Persist(context.Context, *Url) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Persist not implemented")
}
func (UnimplementedBackgroundImagesServer) Get(context.Context, *empty.Empty) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBackgroundImagesServer) mustEmbedUnimplementedBackgroundImagesServer() {}
func (UnimplementedBackgroundImagesServer) testEmbeddedByValue()                          {}

// UnsafeBackgroundImagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackgroundImagesServer will
// result in compilation errors.
type UnsafeBackgroundImagesServer interface {
	mustEmbedUnimplementedBackgroundImagesServer()
}

func RegisterBackgroundImagesServer(s grpc.ServiceRegistrar, srv BackgroundImagesServer) {
	// If the following call pancis, it indicates UnimplementedBackgroundImagesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackgroundImages_ServiceDesc, srv)
}

func _BackgroundImages_Persist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Url)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundImagesServer).Persist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundImages_Persist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundImagesServer).Persist(ctx, req.(*Url))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundImages_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundImagesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundImages_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundImagesServer).Get(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BackgroundImages_ServiceDesc is the grpc.ServiceDesc for BackgroundImages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackgroundImages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "background_images.BackgroundImages",
	HandlerType: (*BackgroundImagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Persist",
			Handler:    _BackgroundImages_Persist_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BackgroundImages_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "background_images.proto",
}
