services:
  db_postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${SQL_DB_USER}
      POSTGRES_PASSWORD: ${SQL_DB_PASSWORD}
      POSTGRES_DB: ${SQL_DB_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --username=${SQL_DB_USER} --dbname=${SQL_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s

  portfolio.grpc:
    image: portfolio.grpc
    environment:
      SQL_DB_HOST: db_postgres
      ASPNETCORE_HTTP_PORTS: 8081
      SQL_DB_PORT: ${SQL_DB_PORT}
      SQL_DB_USER: ${SQL_DB_USER}
      SQL_DB_PASSWORD: ${SQL_DB_PASSWORD}
      SQL_DB_NAME: ${SQL_DB_NAME}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      OTEL_COLLECTOR_ENDPOINT: ${OTEL_COLLECTOR_ENDPOINT}
    build:
      context: .
      dockerfile: Portfolio.Grpc/Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      db_postgres:
        condition: service_healthy

  portfolio.ui:
    image: portfolio.ui
    environment:
      GRPC_BASE_URL: ${GRPC_BASE_URL}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    build:
      context: .
      dockerfile: Portfolio.Ui/Dockerfile
    ports:
      - "4000:8080"
    depends_on:
      - portfolio.grpc

  adminer:
    image: adminer:latest
    environment:
      ADMINER_DEFAULT_SERVER: db_postgres
    ports:
      - "8090:8080"
    depends_on:
      db_postgres:
        condition: service_healthy
